// UCOS 0.1.3

// Assembly headers
BITS == 16
MINREGS 8
MINHEAP 4096
MINSTACK 1024 //a lot of stack for sbpc
MINRAM 65536

//OS Vars
.Bits
	dw @bits
.MinRegs
	dw @minregs
.MinStack
	dw @minstack
.MinHeap
	dw @minheap

.Syscalls //9 sys calls so far, planning on expanding the fs
	dw .os_get_api_version //1
	dw .os_get_raven_version //2
	dw .os_error //3
	dw .os_change_page //4
	dw .os_peek //5
	dw .os_poke //6
	dw .os_create_file //7
	dw .os_delete_file //8
	dw .os_format_disk //9
// Code
.Init
	cal .init_malloc
	cal .os_get_raven_version
	jmp .Init //infinite loop, not done yet
	
// Some syscalls ------------------------------------------------------------

//Misc------------------------------------------------------------------------------------
.os_get_raven_version //Print RavenOS Version
	imm r1 .version1
	psh .version2
	cal printf
	ret
.os_get_api_version //Prints API version
	imm r1, api_version
	cal printf
	ret
.os_error //Error code goes in .errorCode use llod to change it(is an int bc memory constraints)
	psh r1
	imm r1 .errorCode
	out %uint r1
	pop r1
	ret

//Disk -----------------------------------------------------------------------------------

.os_peek //IN: r1 = address OUT: r2 = data
	out %address r1
	in r2 %BUS
	ret
.os_poke //IN: r1 = address r2 = data OUT: none
	out %address r1
	out %bus r2
	ret
.os_change_page //IN: r1 = page num(8192 byte pages)
	out %page r1
	ret

//----------------------------------------------------------------------------------------

// SimplexFS
.os_format_disk //only call this once
	// oh crap, gonna be a lot of imms and incs and cal os_pokes
	
	//damn, tones of RAM used
	.e
		dw ["Setting up SimplexFS please be patient" 0] //tell the user wtf we are doing
	.e1
		dw ["10% done" 0] //telling the user how much of the proccess is done
		//because im nice
	.e2
		dw ["20% done" 0]
	.e3 
		dw ["30% done" 0]
	.e4 
		dw ["40% done" 0]
	.e5 
		dw ["50% done" 0]
	.e6 
		dw ["60% done" 0]
	.e7 
		dw ["70% done" 0]
	.e8 
		dw ["80% done" 0]
	.e9
		dw ["90% done" 0]
	.e10
		dw ["File system installed, creating root directory..." 0]
	.e11
		dw ["SimplexFS setup finished, loading programs from ROM..." 0]
	.e12
		dw ["Programs installed, loading shell.exe..." 0]
	.e13
		dw ["Shell loaded, starting, enjoy session %d - User: %s" 0]
	imm r1 .e
	cal .printf
	imm r1 0
	
	
	// Starting the proccess!
	cal .os_change_page
	imm r1 0 //first 64k page
	
	//load the magic number in simplex
	imm r2 0xfe 
	cal .os_poke 
	inc r1 r1
	imm r2 0xca
	cal .os_poke
	inc r1 r1
	imm r2 0x01
	cal .os_poke
	inc r1 r1
	imm r2 0x32
	cal .os_poke
	inc r1 r1 
	imm r2 0x94
	cal .os_poke
	inc r1 r1
	
	psh r1
	imm r1 .e1
	cal .printf
	pop r1
	
	//ok, now load the number of sectors, remember, 256 byte sectors this header just BARELY fits in 256 bytes(254 bytes)
	//so, 2^24/256 = 65536, great! just one imm, actually 2 bcause length of 2 
	imm r2 0xffff
	cal .os_poke
	inc r1 r1 
	imm r2 0x0000
	cal .os_poke
	inc r1 r1
	
	psh r1
	imm r1 .e2
	cal .printf
	pop r1
	//also, the checksum headers aren't a thing, so the header is actually
	//smaller
	
	//FAT size(as in the size of the table) in 16 bit entries(0x0000 means the sector is
	//unallocated, 0xffff means it is)
	imm r2 0xffff //(65535 bytes or 8 files holy shit thats big, but thats only 8 files
	//in a pool of 2048 files so idgaf)
	cal .os_poke
	inc r1 r1
	imm r2 0x0000 //padding
	cal .os_poke
	inc r1 r1s
	
	psh r1
	imm r1 .e3
	cal .printf
	pop r1
	
	//FAT size in sectors
	//65536/256 = 256
	//so...
	imm r2 0x00ff
	cal .os_poke
	inc r1 r1
	imm r2 0x0000 //more padding(mind you this fs is designed for 8 bit embeded systems
	//so a 16 bit value would be separated into 2 8 bit values)
	cal .os_poke
	inc r1 r1
	
	psh r1
	imm r1 .e4
	cal .printf
	pop r1
	
	//sector indes of root dir(it is 258)
	imm r2 258 //idk the hex for 258 and am too lazy to search it up
	cal .os_poke
	inc r1 r1 
	imm r2 0x0000 //WHY SO MUCH PADDING YOU SU-
	cal .os_poke
	inc r1 r1 
	
	psh r1
	imm r1 .e5
	cal .printf
	pop r1
	
	//version of simplex: 1.0
	imm r2 0x0100
	cal .os_poke
	inc r1 r1 
	imm r2 0x0000
	cal .os_poke
	inc r1 r1 
	
	psh r1
	imm r1 .e6
	cal .printf
	pop r1
	
	//media type: generic or 0x00
	imm r2 0x0000
	cal .os_poke
	inc r1 r1 
	
	psh r1
	imm r1 .e7
	cal .printf
	pop r1
	
	//sxh_id: none, just fill the void
	cal .os_poke //0x0000 already exists in r2 so u dont have to change it
	inc r1 r1 
	cal .os_poke
	inc r1 r1
	
	psh r1
	imm r1 .e8
	cal .printf
	pop r1
	
	//Volume id: Drive A
	imm r2 'D'
	cal .os_poke
	inc r1 r1 
	imm r2 'r'
	cal .os_poke
	inc r1 r1 
	imm r2 'i'
	cal .os_poke
	inc r1 r1 
	imm r2 'v'
	cal .os_poke
	inc r1 r1 
	imm r2 'e'
	cal .os_poke
	inc r1 r1 
	imm r2 ' '
	cal .os_poke
	inc r1 r1
	imm r2 'A'
	cal .os_poke
	inc r1 r1 	
	
	psh r1
	imm r1 .e9
	cal .printf
	pop r1
	
	//root len
	imm r2 0
	cal .os_poke
	
	ret
.os_create_file
	ret
.os_delete_file
	ret

// --------------------------------------------------------------------------


// OS variables
.version1 //pls dont change
	dw ["RavenOS Version %s" 0xa0 0]
.version2 //pls dont change
	dw ["0.1.1 alpha" 0]
.api_version //pls dont change
	dw ["1" 0]
.errorCode //change with llod
	dw 0
