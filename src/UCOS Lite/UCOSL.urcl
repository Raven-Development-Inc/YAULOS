//Byte code
@define StackBase 8192
@define StackSize 4096
@define ip r7
@define stackp r8
@define p 0
@define temp 0


BITS == 16
MINREG 16
MINHEAP 8192
MINSTACK 512
RUN ROM


.Main
	in r16 %text //read
	
	lstr .Thread p r16
	inc p p 
	bne .Main r16 'r'
	imm r6 .Thread
	jmp .InterpretLoop


.string2int
    cal .strlen //r1 = ptr string
    mov temp r1
    bre .str2intend temp 0
    mlt a 10 a
    add a a 

.map
    llod r1 r1 r2 //r2 = offset r1 = str ptr
    bre .map0 
    
    .map0
        imm r1 0
	ret
    .map1
        imm r1 1
	ret
    .map2
        imm r1 2
	ret
    .map3
        imm r1 3
	ret
    .map4
        imm r1 4
	ret
    .map5
        imm r1 5
	ret
     .map6
        imm r1 6
	ret
     .map7
        imm r1 7
	ret
     .map8
        imm r1 8
	ret
     .map9
        imm r1 9
	ret
	
.strlen
    psh r1 // str *
    psh r2 // additional reg
    psh r3
    imm r3 0
    .strlen__loop1
        lod r2 r1
        bre .strlen__end r2 0
        inc r3 r3
        inc r1 r1
        jmp .strlen__loop1
    .strlen__end
        mov r1 r3
        pop r3
        pop r2
        pop r9
        ret

.Thread //128 bytes
	dw 0
	dw 0
	dw 0
	dw 0
	dw 0
	dw 0
	dw 0
	dw 0
	dw 0
	dw 0
	dw 0
	dw 0
	dw 0
	dw 0
	dw 0
	dw 0
	dw 0
	dw 0
	dw 0
	dw 0
	dw 0
	dw 0
	dw 0
	dw 0
	dw 0
	dw 0
	dw 0
	dw 0
	dw 0
	dw 0
	dw 0
	dw 0
	dw 0
	dw 0
	dw 0
	dw 0
	dw 0
	dw 0
	dw 0
	dw 0
	dw 0
	dw 0
	dw 0
	dw 0
	dw 0
	dw 0
	dw 0
	dw 0
	dw 0
	dw 0
	dw 0
	dw 0
	dw 0
	dw 0
	dw 0
	dw 0
	dw 0
	dw 0
	dw 0
	dw 0
	dw 0
	dw 0
	dw 0
	dw 0
	dw 0
	dw 0
	dw 0
	dw 0
	dw 0
	dw 0
	dw 0
	dw 0
	dw 0
	dw 0
	dw 0
	dw 0
	dw 0
	dw 0
	dw 0
	dw 0
	dw 0
	dw 0
	dw 0
	dw 0
	dw 0
	dw 0
	dw 0
	dw 0
	dw 0
	dw 0
	dw 0
	dw 0
	dw 0
	dw 0
	dw 0
	dw 0
	dw 0
	dw 0
	dw 0
	dw 0
	dw 0
	dw 0
	dw 0
	dw 0
	dw 0
	dw 0
	dw 0
	dw 0
	dw 0
	dw 0
	dw 0
	dw 0
	dw 0
	dw 0
	dw 0
	dw 0
	dw 0
	dw 0
	dw 0
	dw 0
	dw 0
	dw 0
	dw 0
	dw 0
	dw 0
	dw 0
	dw 0
	dw 0
	
.InstructionTable
	dw .push
	dw .pop
	dw .add
	dw .sub
	dw .mul
	dw .div
	dw .goto
	// dw .gotoif
	// dw .lt
	// dw .eq
	// dw .gt
	// dw .zero
	// dw .notzero
	// dw .drop
	// dw .rotate
	// dw .duplicate
	dw .end
	
//Bytecode interpreter
//https://en.wikipedia.org/wiki/Threaded_code
//go to the "Token threaded" part and read
.InterpretLoop
	//r6 = pointer to start of thread
	//r11 = current instruction
	jmp start
	.start: //prepare thread and start execution
		lod ip r6
		inc ip ip
		jmp ip
	.dispatch
		inc r7 r7
		lod r11 ip //load current instruction into r11
		imm r9 .InstructionTable
		add r10 r11 r9 //add offset
		xor r9 r9 r9
		jmp r10 //jump to instruction
	.InterpreteEnd
		jmp .Main
	
//Instructions
//r7 = ip
//r8 = sp
//r9 = temp
//r10 = temp2
//r12 = operand 1
//r13 = operand 2
//r4 = operand 3 
//r5 = operand 4
//.Result = result of operations
.push
	inc r7 r7
	lod r9 r7
	str r8 r9
	xor r9 r9 r9
	inc r8 r8
	jmp .dispatch
	
.pop
	inc r7 r7
	lod r10 r7
	bre .Pop_loop1 r10 1 
	bre .Pop_loop2 r10 2
	bre .Pop_loop3 r10 3
	bre .Pop_loop4 r10 4
	.Pop_loop1
		dec r8 r8
		lod r12 r8
	.Pop_loop2
		dec r8 r8
		lod r13 r8
	.Pop_loop3
		dec r8 r8
		lod r4 r8
	.Pop_loop4
		dec r8 r8
		lod r5 r8
	
	xor r9 r9 r9
	str r8 r9
	xor r10 r10 r10
	jmp .dispatch

.end
	jmp .InterpreteEnd

.add
	jmp .pop
	jmp .pop
	add r9 r12 r13
	str r8 r9
	inc r8 r8
	xor r9 r9 r9
	jmp .dispatch
	
.sub
	jmp .pop
	jmp .pop
	sub r9 r12 r13
	str r8 r9
	inc r8 r8
	xor r9 r9 r9
	jmp .dispatch
	
.mul
	jmp .pop
	jmp .pop
	mlt r9 r12 r13
	str r8 r9
	inc r8 r8
	xor r9 r9 r9
	jmp .dispatch
	
.div
	jmp .pop
	jmp .pop
	div r9 r12 r13
	str r8 r9
	inc r8 r8
	xor r9 r9 r9
	jmp .dispatch

.goto
	inc r7 r7
	lod r9 r7
	mov r7 r9
	xor r9 r9 r9
	jmp .dispatch

