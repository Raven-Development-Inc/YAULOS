//BrainFURCL Interpreter v6.0.0
// TODO: Work out loop kinks
minreg 5
minheap 16348
bits 16
minstack 256
@define programstart 32768 // replace with amount of reserved memory
@define programend r3
@define bf_pc r4
@define currchar r5
@define maxtapelength 16348

cal .interpret_bf

hlt


.interpret_bf
cal .loadInputToMem
imm bf_pc programend
.interpretloop
lod currchar bf_pc
bre .incPtr currchar '>'
bre .decPtr currchar '<'
bre .incMem currchar '+'
bre .decMem currchar '-'
bre .printPtr currchar '.'
bre .inputPtr currchar ','
bre .startLoop currchar '['
bre .endLoop currchar ']'
bne .commandNotFound currchar '>'
bne .commandNotFound currchar '<'
bne .commandNotFound currchar '+'
bne .commandNotFound currchar '-'
bne .commandNotFound currchar '.'
bne .commandNotFound currchar ','
bne .commandNotFound currchar '['
bne .commandNotFound currchar ']'
HLT


.isLoop
	dw 0

.incPtr
inc r1 r1
cal .checkPointerSafety
inc bf_pc bf_pc
jmp .interpretloop

.decPtr
dec r1 r1
cal .checkPointerSafety
inc bf_pc bf_pc
jmp .interpretloop

.incMem
lod r2 r1
inc r2 r2
str r1 r2
inc bf_pc bf_pc
jmp .interpretloop

.decMem
lod r2 r1
dec r2 r2
str r1 r2
inc bf_pc bf_pc
jmp .interpretloop

.printPtr
lod r2 r1
out %text r2
inc bf_pc bf_pc
jmp .interpretloop

.inputPtr
in r2 %text
str r1 r2
inc bf_pc bf_pc
jmp .interpretloop

.startLoop
inc bf_pc bf_pc
psh bf_pc
str .isLoop 0xffff //useless shit 
jmp .interpretloop

.endLoop
lod r2 r1
bnz .gotostart r2
inc bf_pc bf_pc
jmp .interpretloop
.gotostart
pop r1
psh r1
jmp .interpretloop

.checkPointerSafety
ble .printsegfault r1 programend
add r5 programend r1
bge .printsegfault r5 maxtapelength
ret
.printsegfault
out %text 'S'
out %text 'e'
out %text 'g'
out %text 'm'
out %text 'e'
out %text 'n'
out %text 't'
out %text 'a'
out %text 't'
out %text 'i'
out %text 'o'
out %text 'n'
out %text ' '
out %text 'f'
out %text 'a'
out %text 'u'
out %text 'l'
out %text 't'
out %text '.'
hlt

.commandNotFound
out %text 'C'
out %text 'o'
out %text 'm'
out %text 'm'
out %text 'a'
out %text 'n'
out %text 'd'
out %text ' '
out %text 'n'
out %text 'o'
out %text 't'
out %text ' '
out %text 'f'
out %text 'o'
out %text 'u'
out %text 'n'
out %text 'd'
out %text '.'
hlt




.loadInputToMem
imm r1 programstart
.loadmemloop
in r2 %text
bnz .notzero r2
str r1 0
inc r1 r1
imm programend r1
jmp .interpretloop
.notzero
str r1 r2
inc r1 r1
jmp .loadmemloop
