@define MALLOC_MAINP M0
@define b_allocs 0
@define allocs 0
@define temp 0
@define temp1 0
@define temp2 0
@define temp3 0

.FS_init:
	xor r1 r1
	xor r2 r2
	xor r3 r3
	xor r4 r4
	xor temp temp
	
.SuperBlockPtrTable //for addressing Blocks (maximum 1 Superblock)
	dw [0]
.NewSuperBlock //Creates new super block & returns the pointer to r1
	bre .EndOfNewSBlock allocs 1
	imm r1 4
	cal .malloc
	//header aka FS1
	lstr r1 0 0 //header 1
	lstr r1 1 0 //header 3
	lstr r1 2 0 //header 3
	lstr allocs .SuperBlockPtrTable r1
	inc allocs allocs
	jmp .EndOfNewSBlock
	
	.EndOfNewSBlock
		ret
	
.dispose //Superblock alloc # in r1; do `llod r1 .FloatPtrTable x` in which
	//x is  the alloc #
	cal .free
	dec allocs allocs
	
	.dispose_loop1
		llod r2 .SuperBlockPtrTable temp
		bre .dispose_loop2 r2 r1
		inc temp temp
		jmp .dispose_loop1
		
	.dispose_loop2
		xor r3 r3
		str r2 r3
		jmp .dispose_loop3
	.dispose_loop3
		inc temp temp
		lod r3 temp
		dec temp temp
		str temp r3
		lod temp temp
		brz .dispose_end temp
		jmp .dispose_loop3
	.dispose_end
		ret

._setConst_s //r1 = header[0] r2 = header[1] r3 = header[2] //r4 = starting sector // r5 = index of superblock
	llod r5 .SuperBlockPtrTable r5
	lstr r5 0 r1
	lstr r5 1 r2
	lstr r5 2 r3
	lstr r5 3 r4
	ret
	
.BlockPtrTable //for addressing Blocks (256 blocks per disk page)
	dw [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ]
.NewBlock //Creates new block & returns the pointer to r1
	imm r1 1FF //rlly big
	cal .malloc
	lstr r1 0 0 //type
	lstr r1 1 0 //next_block
	//the rest is generic data
	lstr allocs .BlockPtrTable r1
	inc b_allocs b_allocs
	ret
	
.dispose //Superblock alloc # in r1; do `llod r1 .FloatPtrTable x` in which
	//x is  the alloc #
	cal .free
	dec b_allocs b_allocs
	
	.dispose_loop1
		llod r2 .BlockPtrTable temp
		bre .dispose_loop2 r2 r1
		inc temp temp
		jmp .dispose_loop1
		
	.dispose_loop2
		xor r3 r3
		str r2 r3
		jmp .dispose_loop3
	.dispose_loop3
		inc temp temp
		lod r3 temp
		dec temp temp
		str temp r3
		lod temp temp
		brz .dispose_end temp
		jmp .dispose_loop3
	.dispose_end
		ret

._setConst //r1 = type r2 = next r5 = index of block
	llod r5 .BlockPtrTable r5
	lstr r5 0 r1
	lstr r5 1 r2
	ret
	
._type: //r1 = index of float; gets the type
	llod r1 .BlockPtrTable r1
	llod r1 r1 0
	mov r2 r1
	cpy r1 r2
	ret
	
._nextBlock: //r1 = index of float; gets next_block
	llod r1 .BlockPtrTable r1
	llod r1 r1 1
	mov r2 r1
	cpy r1 r2
	ret
	

._setData //r1 = ptr to data 0 terminating // r2 = index of block
	xor temp temp
	llod r2 .BlockPtrTable r2
	add temp r2 2
	.Loop
		llod r2 r1 temp
		brz .SetDataEnd r2
		str temp r2
		jmp .Loop
	.SetDataEnd
		ret

._getData //r1 = ptr to array // r2 = index of block
        xor temp temp
	llod r2 .BlockPtrTable r2
	add temp r2 2
	.GetLoop
		
		lod temp2 temp
		str r1 temp2
		brz .GetEnd r2
		
		jmp .GetLoop
	.GetEnd
		ret
		
		
.GetPage //r1 = sector addr //out: r1 = page
	imm temp 8
	bsr r1 r1 temp
	ret

.GetRawAddr //r1 = sector addr //out: r1 = raw addr
	imm temp 0xff
	and r1 r1 temp
	mul r1 r1 512
	ret

//IDK why these two are necassary
// .traversefs

// block_t * getBlock(uint16_t ** memory, block_t * block, uint16_t index) { // read block from the directory/block by index
//     return (block_t*)(&memory[get_page(block->inline_data[index])][get_raw_addr(block->inline_data[index])]);
// }
.getBlock //r1 = memory //r2 = block index //r3 = index //out: r4: ptr to block
    cal .NewBlock
    mov temp1 r1
    xor r1 r1 r1
    imm r1 .temparr
    
    cal .get_page
	
// void print16(uint16_t * str) { // print dynamic amount of chars represented by uint16_t
//  int i = 0;
//  while(str[i] != 0) {
//      printf("%c", str[i]);
//      i++;
//  }
// }
	
.print16 //r2 = ptr to string of zero terminating shorts
    xor temp temp
    .print16_1
        imm r1 .stringex
	llod r3 r2 temp
	brz .print16_2 r3
	psh r3
	cal .printf
	inc temp temp
	jmp .print16_1
    .print16_2
        ret
	

	
	
//Vars
.stringex
    dw ["%c" 0]
    
.temparr
     dw
    
    
    
    
    
//Stdlib V2


.strlen
    psh r1 // str *
    psh r2 // additional reg
    psh r3
    imm r3 0
    .strlen__loop1
        lod r2 r1
        bre .strlen__end r2 0
        inc r3 r3
        inc r1 r1
        jmp .strlen__loop1
    .strlen__end
        mov r1 r3
        pop r3
        pop r2
        pop r9
        ret

.strcpy
    psh r1 // dest str*
    psh r2 // src str*
    psh r3 // additional reg
    .strcpy__loop1
        lod r3 r2
        bre .strcpy__end r3 0
        str r1 r3
        inc r2 r2
        inc r1 r1
        jmp .strcpy__loop1
    .strcpy__end
        pop r3
        pop r2
        pop r1
        ret


    
.memcpy
    psh r1 // dest *
    psh r2 // src *
    psh r3 // size
    psh r4 // additional
    .memcpy__loop1
        lod r4 r2
        str r1 r4
        dec r3 r3
        inc r1 r1
        inc r2 r2
        bre .memcpy__done r3 0
        jmp .memcpy__loop1
.memcpy__done
    pop r4
    pop r3
    pop r2
    pop r1
    ret

bits == 16

.print_str
    // input data: r1 -> char*
    psh r1
    psh r2 // reserve reg
    imm r2 0
    .print_str__loop1
        lod r2 r1
        bre .print_str__endp r2 0
        out %text r2
        inc r1 r1
        jmp .print_str__loop1
    .print_str__endp
        pop r2
        pop r1
        ret

.printf // r1 = char*
    pop r9 // ret*
    str 0xee0 r1 
    str 0xee1 r2
    str 0xee2 r3
    imm r2 0
    .printf__loop1
        lod r2 r1
        bre .printf_str__endp r2 0
        bre .printf__perc r2 '%'
        out %text r2
        inc r1 r1
        jmp .printf__loop1
    .printf__perc
        inc r1 r1
        lod r2 r1
        bre .printf__percsub__d r2 'd'
        bre .printf__percsub__s r2 's'
        bre .printf__percsub__c r2 'c'
        bre .printf__percsub__perc r2 '%'
        jmp .printf__percsub__err
    .printf__percsub__perc
        out %text '%'
        inc r1 r1
        jmp .printf__loop1
    .printf__percsub__d
        pop r3
        out %numb r3
        inc r1 r1
        jmp .printf__loop1
    .printf__percsub__c
        pop r3
        out %text r3
        inc r1 r1
        jmp .printf__loop1
    .printf__percsub__s
        pop r3
        str 0xee3 r1
        mov r1 r3
        cal .print_str
        lod r1 0xee3
        inc r1 r1
        jmp .printf__loop1
    .printf__percsub__err
        imm r1 .printf__percsub__err_str
        psh r2
        cal .printf
    .printf_str__endp
        lod r3 0xee2
        lod r2 0xee1
        lod r1 0xee0
        jmp r9
    .printf__percsub__err_str
        dw [ "Wrong percentage-value %c" 0 ]

.print_int //int goes in r1
	out %int r1
	ret
	
.init_malloc
str MALLOC_MAINP 0xffff
ret

.malloc
    psh r1 // size
    psh r2 // dynamic malloc_start*
    imm r2 MALLOC_MAINP
    psh r3 // additional reg
    psh r4
    .malloc__loop1
        lod r3 r2
        brg .malloc__found__free r3 0x8000
        and r3 r3 0x7fff
        mov r2 r3
        jmp .malloc__loop1
    
    .malloc__found__free
        and r3 r3 0x7fff // getting address of next chunk (can work as size indicator)
        sub r4 r3 r2 // size of chunk available
        brl .malloc__found r1 r4
        // bre .malloc__found__partition__needed r1 r4
        bre .malloc__fail r3 0x7fff // check for failure
        bre .malloc__fail r3 0x0000
        mov r2 r3
        jmp .malloc__loop1
    .malloc__fail
        pop r4
        pop r3
        pop r2
        pop r1
        imm r1 0xffff // -1
        ret
    .malloc__found
        bne .malloc__found__skip r3 0x7fff // if ( address_of_the_next_chunk == 0x7fff) {
        // r1 - size, r2 - pointer to curr chunk, r3 - addr to next chunk, r4 - size of chunk
        psh r4
        mov r4 r1
        add r4 r4 r2
        and r4 r4 0x7fff
        add r4 r4 1
        str r2 r4
        str r4 0xffff
        pop r4
        jmp .malloc__end
        // }
        .malloc__found__skip 
        bre .malloc__found__skip2 r1 r4 // if ( chunk_size != req_size ) { -> fragmentation
        psh r4
        psh r3
        or r3 r3 0x8000 // making header from address
        mov r4 r1 // 
        add r4 r4 r2 // pointer to next header
        and r4 r4 0x7fff 
        add r4 r4 1 // making offset
        str r2 r4
        lod r5 r4
        bne .malloc__found__endstack r5 0xffff // if ( r4* == END_OF_MALLOC_STACK ) {
        str r4 0xffff
        jmp .malloc__found__endstack_2
        .malloc__found__endstack // } else {
        str r4 r3
        .malloc__found__endstack_2 // }
        pop r3
        pop r4
        jmp .malloc__end
        .malloc__found__skip2 // } else { -> simple address storing
        and r3 r3 0x8000
        str r2 r3
        .malloc__end
        pop r4
        pop r3
        mov r1 r2
        inc r1 r1
        pop r2
        pop r0
        ret

.fast_free
    psh r1 // pointer
    psh r2 // additional data
    psh r3
    psh r4
    and r1 r1 0x7fff
    dec r1 r1
    lod r2 r1
    brg .fast_free__alreadyfree r2 0x7fff
    bre .fast_free__alreadyfree r2 0
    sub r3 r2 r1 // size
    dec r3 r3
    inc r1 r1
    mov r4 r1
    dec r1 r1
    .fast_free__loop1
        str r4 0
        inc r4 r4
        dec r3 r3
        bre .fast_free__freed r3 0
        jmp .fast_free__loop1
.fast_free__freed
    or r2 r2 0x8000
    str r1 r2
.fast_free__alreadyfree
    cal .defragm
    pop r4
    pop r3
    pop r2
    pop r1
    ret
.defragm
    psh r1 // pointer
    psh r2 // additional data
    psh r3
    lod r2 r1
    brl .defragm_end r2 0x8000 // not free
    and r2 r2 0x7fff
    lod r3 r2
    brl .defragm_end r3 0x8000
    and r3 r3 0x7fff
    str r1 r3
    str r2 0
    .defragm_end
    pop r3
    pop r2
    pop r1
    ret

.free   
    psh r1 // pointer
    psh r2 // additional data
    psh r3
    psh r4
    and r1 r1 0x7fff
    dec r1 r1
    lod r2 r1
    brg .free__alreadyfree r2 0x7fff
    bre .free__alreadyfree r2 0
    sub r3 r2 r1 // size
    dec r3 r3
    inc r1 r1
    mov r4 r1
    dec r1 r1
    .free__loop1
        str r4 0
        inc r4 r4
        dec r3 r3
        bre .free__freed r3 0
        jmp .free__loop1
.free__freed
    or r2 r2 0x8000
    str r1 r2
.free__alreadyfree
    cal .defragm_global
    pop r4
    pop r3
    pop r2
    pop r1
    ret
        

.defragm_global
    psh r1 // dynamic malloc heap pointer
    imm r1 MALLOC_MAINP
    psh r2 // additional stuff
    psh r3
    .defragm_global__loop1
        lod r2 r1
        bre .defragm_global__end r2 0xffff
        brg .defragm_global__found r2 0x7fff
        mov r1 r2
        jmp .defragm_global__loop1
    .defragm_global__found
        and r2 r2 0x7fff
        lod r3 r2
        brg .defragm_global__found2 r3 0x7fff
        mov r1 r2
        jmp .defragm_global__loop1
    .defragm_global__found2
        str r1 r3
        str r2 0
        jmp .defragm_global__loop1
    .defragm_global__end
        pop r3
        pop r2
        pop r1
        ret
		
		
.assert_reg_eq
    bre .assert_err R1 R2
    .assert_err
        cal .error
        hlt
    .error
        imm R1 error_str
        cal .printf
        ret
    .error_str
        dw ["Assertion failed, terminating..." 0]

.assert_reg_gt
    brg .assert_err R1 R2
    .assert_err
        cal .error
        hlt
    .error
        imm R1 error_str
        cal .printf
        ret
    .error_str
        dw ["Assertion failed, terminating..." 0]
		
.assert_reg_lt
    brl .assert_err R1 R2
    .assert_err
        cal .error
        hlt
    .error
        imm R1 error_str
        cal .printf
        ret
    .error_str
        dw ["Assertion failed, terminating..." 0]
