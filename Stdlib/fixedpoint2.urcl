BITS == 32
@DEFINE a R1
@DEFINE n R2
@DEFINE templ R3
@DEFINE tempu R4
@DEFINE answer R5
@DEFINE fraction1 R6
@DEFINE fraction2 R7
@DEFINE iterations 10
//16.16 fixed point ln(a)
//for other base multiply the result by 65536 / ln(base)
.start
IN a %fixed
SUB templ a 0x10000
ADD tempu a 0x10000
PSH 0
BRP .skip templ
  NEG templ templ
  POP R0
  PSH 1
.skip
BSR tempu tempu 8
DIV templ templ tempu
BSL fraction1 templ 8

UMLT tempu fraction1 fraction1
MLT templ fraction1 fraction1
BSR templ templ 16
BSL tempu tempu 16
ADD fraction2 tempu templ

IMM n 0
IMM answer 0
.loop
LSH templ n
INC templ templ
DIV templ 0x80000000 templ
BSR a templ 14

UMLT tempu fraction1 a
MLT templ fraction1 a
BSR templ templ 16
BSL tempu tempu 16
ADD templ templ tempu

POP tempu
BRZ .add tempu
  SUB answer answer templ
  JMP .end
.add
  ADD answer answer templ
.end
PSH tempu

UMLT tempu fraction1 fraction2
MLT templ fraction1 fraction2
BSR templ templ 16
BSL tempu tempu 16
ADD fraction1 tempu templ

INC n n
BRL .loop n iterations
POP r0
BRP .positive answer
OUT %TEXT '-'
NEG answer answer
.positive
OUT %FIXED answer
OUT %TEXT '\n'
JMP .start

.overflow
OUT %TEXT '-'
OUT %TEXT '\n'
JMP .start